component rpi_spi_cpld """Hardware driver and firmware for the RPi-CNC-HAT, for use with stepper machines and RaspberryPi SPI .""";

description """
rpi_spi_cpld is a LinuxCNC software driver and associated firmware that allow the RPi-CNC-HAT board to be used to control a stepper-based CNC machine.

The driver has 4 step+direction channels, 14 dedicated digital outputs, and 16
dedicated digital inputs.

.SS CPLD clk from rpi
Use loadusr -w minimal_clk 40M -q

.SS RPI config.txt
dtparam=spi=on
## rpi2 /dev/spidev1.2
dtoverlay=spi1-3cs
## rpi3 /dev/spidev1.0
dtoverlay=spi1-1cs
##

.SS Step generators
The step generator takes a position input and output.

The step waveform includes step length/space and direction hold/setup time.
Step length and direction setup/hold time is enforced in the FPGA.  Step space
is enforced by a velocity cap in the driver.

\\fI(all the following numbers are subject to change)\\fR
The maximum step rate is stepgen.clk/128.  For position
feedback to be accurate, the maximum step rate is 512 pulses per servo cycle
(so a 1kHz servo cycle does not impose any additional limitation).  The maximum
step rate may be lowered by the step length and space parameters, which are
rounded up to the nearest multiple of 64/stepgen.clk.

.SS Digital I/O
The digital output pins conform to the `canonical digital output' interface
described in the HAL manual.

The digital input pins conform to the `canonical digital input' interface
described in the HAL manual.
""";

pin in float stepgen.#.position-cmd[4];
pin out float stepgen.#.velocity-fb[4];
pin out float stepgen.#.position-fb[4];
pin out s32 stepgen.#.counts[4];
pin in bit stepgen.#.enable[4];
pin in bit stepgen.#.reset[4] """When TRUE, reset position-fb to 0""";
param rw float stepgen.#.scale[4] = 1.0;
param rw float stepgen.#.maxvel[4] = 0;
param rw float stepgen.#.maxaccel[4] = 1.0;
param rw bit stepgen.step.polarity """true -> invert""";
param rw bit dir.#.polarity[4]=0 ;

param rw bit wdt.enable=0;
param rw u32 tap=0;

//param rw u32 stepgen.clk = 40000000; //pluto_clk
param rw u32 stepgen.width = 15 """Step/dir/space length in N=1-32(1-32uS).""";

param rw u32 spi.speed = 4000000 """spi speed HZ""";

pin in bit dout.##[14] """dout.\\fIMM\\fR corresponds to the pin labeled
OUT\\fIM\\fR on the pinout diagram.""";
param rw bit dout.##-invert[14]
"""If TRUE, the output on the corresponding \\fBdout.\\fIMM\\fR is inverted.""";

pin out bit din.##[16];
pin out bit din.##_not[16] """din.\\fIMM\\fR corresponds to the pin labeled
IN\\fIM\\fR on the pinout diagram.""";

pin out float spindle.rpm """Spindle rpm""";
pin out s32 spindle.data  """Spindle count""";
pin in  s32 pwm.out """Set pwm 0-255""";
//param rw u32 rpm.freq=0 """freq for calc RPM""";

param rw s32 debug_0;
param rw s32 debug_1;
//param rw float debug2=0.01;//?? great value changes DIR
//param rw float debug_3=2.0
// """Registers that hold debugging information of interest to developers""";

option singleton;
option extra_setup;
option extra_cleanup;
option data internal;

see_also """The \\fIpluto_step\\fR section in the HAL User Manual, which shows the location of each physical pin on the pluto board.""";

function transfer  """transfers data between master and slave devices""";
function spitest """test spi transfer (only for developers)""";

license "GPL";
author "Matsche & fedor2018";
;;

#include "rtapi.h"
#include "rtapi_bitops.h"
#include "rtapi_app.h"
#include "hal.h"

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <stdarg.h>
#include <linux/types.h>
#include <linux/spi/spidev.h>

int check_platform(void);

#define SPI_BUFFER_SIZE 20
#define BUFSIZE (SPI_BUFFER_SIZE/4)

//volatile unsigned *spi;
static int fd;
static uint8_t spi_mode=0;
static uint8_t spi_bits=8;
static __u32 spi_spd=1000000;
static __u16 spi_delay=0;

static volatile __u32 txBuf[BUFSIZE], rxBuf[BUFSIZE];

//static int speedrange=0;
//RTAPI_MP_INT(speedrange, "Speed range 0..3");
static __u32 pluto_clk = 40000000; //pluto_clk
RTAPI_MP_INT(pluto_clk, "Clock in HZ(40000000)");
static char *spi_dev="";
RTAPI_MP_STRING(spi_dev, "default auto");

#define W 10
#define F 11
#define T 5

#define PLUTO_CLK   pluto_clk             //40MHz
#define PLUTO_DIV   64
#define PLUTO_FREQ  (PLUTO_CLK / PLUTO_DIV) // 625kHz
#define PLUTO_SPEED  (1.0/PLUTO_FREQ)       // 1.6e-6 S
#define PLUTO_SPEED_NS (PLUTO_SPEED*1e9)    // 0.8us

#define TMAX          ((1<<T)-1) // 0x1f=b11111
#define ONE           (1<<F)     // 0x800 /2048
#define MAX_STEP_RATE ((1<<F)-1) //  0x7ff
#define RPM_FREQ      PLUTO_CLK/2048  //  31.25kHz
#define MASK          ((1<<(W+F))-1)    //
#define MAXDELTA      (MASK/2)      // FFFFF/1048575
#define LEN_MASK      0x1F

typedef struct {
        int64_t last_count[4];
        int64_t reset_count[4];
        double old_position_cmd[4];
        double old_velocity_cmd[4];
        double maxaccel[4];
} internal;


EXTRA_SETUP() {
    spi_spd=spi_speed;
    int ret=check_platform();
    if(ret==0){
          rtapi_print_msg(RTAPI_MSG_ERR,
                "HAL_rpi_spi_cpld: ERROR: platform unsupported\n");
          return -1;
    }
    if(strlen(spi_dev)==0){
        spi_dev=(ret==2)? "/dev/spidev1.2":"/dev/spidev1.0";
    }
    fd=open(spi_dev, O_RDWR);
    if(fd<0){
        rtapi_print_msg(RTAPI_MSG_ERR,
            "HAL_rpi_spi_cpld: ERROR: cannot open spi %s\n",
			spi_dev);
        return -1;
  }
  if(ioctl(fd, SPI_IOC_WR_MODE, &spi_mode)<0||
    ioctl(fd, SPI_IOC_RD_MODE, &spi_mode)<0){
        rtapi_print_msg(RTAPI_MSG_ERR,
                "HAL_rpi_spi_cpld: ERROR: SPI_IOC_xx_MODE\n");
        return -1;
    }
  if(ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &spi_bits)<0||
    ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &spi_bits)<0){
        rtapi_print_msg(RTAPI_MSG_ERR,
                "HAL_rpi_spi_cpld: ERROR: SPI_IOC_xx_BITS_PER_WORD\n");
        return -1;
    }
  if(ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &spi_spd)<0||
    ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &spi_spd)<0){
        rtapi_print_msg(RTAPI_MSG_ERR,
                "HAL_rpi_spi_cpld: ERROR: SPI_IOC_xx_MAX_SPEED_HZ=%d req=%d\n",
                                        SPI_IOC_WR_MAX_SPEED_HZ, spi_spd);
        return -1;
    }
    rtapi_print_msg(RTAPI_MSG_WARN,"HAL_rpi_spi_cpld: setup ok\n");
    printf("HAL_rpi_spi_cpld: CLK=%dHz PLUTO_FREQ=%dHz PLUTO_SPEED=%.2fuS: setup ok\n",
			PLUTO_CLK, PLUTO_FREQ, PLUTO_SPEED*1000000.0);
    return 0;
}

EXTRA_CLEANUP() {
  close(fd);
    rtapi_print_msg(RTAPI_MSG_WARN,
            "HAL_rpi_spi_cpld: cleanup\n");
}

int spi_transfer32(int fd, volatile __u32 *tx, volatile __u32 *rx){
        struct spi_ioc_transfer tr = {
                .tx_buf = (unsigned long)tx,
                .rx_buf = (unsigned long)rx,
                .len = SPI_BUFFER_SIZE,
                .delay_usecs = spi_delay,
                .speed_hz = spi_spd,
                .bits_per_word = spi_bits,
        };
        if(ioctl(fd, SPI_IOC_MESSAGE(1), &tr)<0){
            rtapi_print_msg(RTAPI_MSG_ERR,
                "HAL_rpi_spi_cpld: ERROR: transer32\n");
            return -1;
        }
        return 0;
}

FUNCTION(spitest) {
        char *buf;
        int i;
        __u32 spidata;

        for (i=0; i<BUFSIZE; i++) {
                txBuf[i] = i;
        }

        rtapi_print_msg(RTAPI_MSG_ERR,
            "HAL_rpi_spi_cpld: test transfer32=%d: ",
            spi_transfer32(fd, txBuf, rxBuf));
        for (i=0; i<BUFSIZE; i++) {
                spidata = rxBuf[i];
            rtapi_print_msg(RTAPI_MSG_ERR," %08X",spidata);
        }
        rtapi_print_msg(RTAPI_MSG_ERR,"\n");
}

static inline int64_t extend(int64_t old, int newlow){//, int nbits) {//W+F
//    int64_t mask = (1<<nbits) - 1;
//    int64_t maxdelta = mask / 2;
    int64_t oldhigh = old & ~MASK;
    int64_t oldlow =  old & MASK;
    int64_t candidate1, candidate2;

    candidate1 = oldhigh | newlow;
    if(oldlow < newlow){
        candidate2 = candidate1 - (1<<(W+F));//(1<<nbits);
    }else{
        candidate2 = candidate1 + (1<<(W+F));//(1<<nbits);
    }
    if(llabs(old-candidate1) > MAXDELTA){
        return candidate2;
    }
                return candidate1;
}

int stepgen2(int i, double max_vel, long period){// PiCnc v2
    double max_accl=max_vel/fperiod; //set internal accel limit to its absolute max
    double match_accl, new_vel;

    if(stepgen_maxaccel(i) <= 0.0){
        stepgen_maxaccel(i)=0.0;
    }else{
        if((stepgen_maxaccel(i)*fabs(stepgen_scale(i))) > max_accl){
            stepgen_maxaccel(i)=max_accl/fabs(stepgen_scale(i));
        }else{
            max_accl=stepgen_maxaccel(i)*fabs(stepgen_scale(i));
        }
    }
    double pos_cmd = stepgen_position_cmd(i)*stepgen_scale(i);// calculate position command in counts
    double vel_cmd = (pos_cmd-data.old_position_cmd[i])/fperiod;//calculate velocity command in counts/sec
    data.old_position_cmd[i] = pos_cmd;

    if(vel_cmd > max_vel){//apply frequency limit
        vel_cmd = max_vel;
    }else if(vel_cmd < -max_vel){
        vel_cmd = -max_vel;
    }
    if(vel_cmd > data.old_velocity_cmd[i]){//determine which way we need to ramp to match velocity
        match_accl = max_accl;
    }else if(vel_cmd < -data.old_velocity_cmd[i]){
        match_accl = -max_accl;
    }
    double match_time = (vel_cmd-data.old_velocity_cmd[i])/match_accl;//determine how long the match would take
    double avg_v = (vel_cmd + data.old_velocity_cmd[i]) * 0.5;//calc output position at the end of the match
    double curr_pos = stepgen_position_fb(i)*stepgen_scale(i);//
    double est_out = curr_pos + avg_v * match_time;
    double est_cmd = pos_cmd + vel_cmd * (match_time - 1.5*fperiod);//calculate the expected command position at that time
    double est_err = est_out - est_cmd;

    if ( match_time < fperiod){//we can match velocity in one period
        if(fabs(est_err) < 0.0001){
            new_vel = vel_cmd;
        }else{
             new_vel = vel_cmd - 0.5 *est_err/fperiod;
             if(new_vel > (data.old_velocity_cmd[i] + max_accl * fperiod)){
                new_vel = (data.old_velocity_cmd[i] + max_accl * fperiod);
             }else if(new_vel < (data.old_velocity_cmd[i] - max_accl * fperiod)){
                new_vel = (data.old_velocity_cmd[i] - max_accl * fperiod);
             }
        }
    }else{
        double dv = -2.0*match_accl*fperiod;
        double dp = dv*match_time;
        if(fabs(est_err+fperiod*2.0)< fabs(est_err)){
            match_accl = -match_accl;
        }
        new_vel = data.old_velocity_cmd[i] + match_accl*fperiod;
    }
    if(new_vel > max_vel){  //apply frequency limit
        new_vel = max_vel;
    }else if(new_vel < max_vel){
        new_vel = -max_vel;
    }
    data.old_velocity_cmd[i]=new_vel;
    int rate= new_vel *stepgen_scale(i)*ONE*PLUTO_SPEED;
    if(i==0){
        static int orate=0;
        if(rate!=orate && rate!=0){
            printf("orate=%d rate=%d maxrate=%d "
		"newvel=%.1f maxvel=%.1f pos_cmd=%.1f "
		"max_accl=%.1f curr_pos=%.1f match_time=%f "
		" est_out=%f est_cmd=%f est_err=%f "
		" fp=%f scale=%.1f one=%d p_speed=%f\n",
                orate, rate, MAX_STEP_RATE, 
		new_vel, max_vel, pos_cmd,
		max_accl, curr_pos, match_time,
		est_out, est_cmd, est_err,
		fperiod,stepgen_scale(i),ONE,PLUTO_SPEED);
        }
        orate=rate;
    }
    return rate;
}

void stepgen_fb(__u32 spidata, int i, long period){
    double fcount;
//    spidata = rxBuf[i];

    int reset = stepgen_reset(i);
    int newlow = spidata & MASK;
    int64_t count = extend(data.last_count[i], newlow);//, W+F);
    stepgen_velocity_fb(i) = (count-data.last_count[i])/stepgen_scale(i)/fperiod/(1<<F);
    data.last_count[i] = count;
    if(reset) data.reset_count[i] = count;
    fcount = (count-data.reset_count[i])*1.0/(1<<F);
    stepgen_counts(i) = fcount;
    stepgen_position_fb(i) = fcount/stepgen_scale(i);

    if(i == 0) {
    //  debug_0 = spidata;
        debug_1 = newlow;
        if(debug_1 != newlow){
            printf("newlow=%d fcount=%f stepgen_position_fb=%f stepgen_velocity_fb=%f\n",
            newlow, fcount, stepgen_position_fb(i), stepgen_velocity_fb(i));
        }
    }
}

FUNCTION(transfer) {
        char *buf;
        __u16 * tbuf;

        int i;
        __u32 spidata;

        int r = 0;
        int steplen_ticks = stepgen_width;
        int rate;//, maxrate = MAX_STEP_RATE;
        double fmax;

        if(steplen_ticks < 1) {
            steplen_ticks=1;
        }else if(steplen_ticks > TMAX) {
            steplen_ticks = TMAX;
            rtapi_print_msg(RTAPI_MSG_ERR,
                 "Requested step length %dns decreased to %dns "
                 "due to hardware limitations\n",
                  stepgen_width, TMAX * PLUTO_SPEED_NS);
                //stepgen_steplen = TMAX * PLUTO_SPEED_NS;
        }
        // Speed limits come from several sources
        // First limit: step waveform timings
        fmax = PLUTO_FREQ / (4*steplen_ticks);//
        // Second limit: highest speed command
/*        if(fmax > PLUTO_FREQ / 2)// 78-312kHz
            fmax = PLUTO_SPEED * 2;
*/        // fperiod=(period*1e-9)
        if(fmax > MAXDELTA / fperiod )
            fmax = MAXDELTA / fperiod;

        tbuf = (__u16 *)txBuf;
        for(i=0; i<4; i++) {
            rate=stepgen2(i, fmax, period);
/*
            double new_position_cmd = stepgen_position_cmd(i);
            double v = new_position_cmd - data.old_position_cmd[i];
            double est_err = stepgen_position_fb(i) + data.old_velocity_cmd[i] * fperiod - new_position_cmd;
            double actual_max;
            double scale_abs = abs(stepgen_scale(i));
            //double v0=v;

            //v = v - debug2 * est_err / fperiod;//disable debug2 ???
            if(v > 0) v = v + .5/scale_abs;
            else if(v < 0) v = v - .5/scale_abs;

            data.old_position_cmd[i] = new_position_cmd;
            data.old_velocity_cmd[i] = v;
            actual_max = fmax / scale_abs;
            if(stepgen_maxvel(i) < 0) stepgen_maxvel(i) = -stepgen_maxvel(i);//
            if(stepgen_maxvel(i) != 0 && stepgen_maxvel(i) > actual_max) {
                    static int message_printed[4] = {0,0,0,0};
                    if(!message_printed[i]) {
                            rtapi_print_msg(RTAPI_MSG_ERR,
                                 "Requested step rate %dHz decreased to %dHz "
                                 "due to hardware or timing limitations\n",
                                  (int)(stepgen_maxvel(i) * scale_abs),
                                  (int)(fmax));
                            message_printed[i] = 1;
                    }
                    stepgen_maxvel(i) = actual_max;
            }

            if(stepgen_maxvel(i) == 0) {
                    if(v < -actual_max) v = -actual_max;
                    if(v > actual_max) v = actual_max;
            }else {
                    if(v < -stepgen_maxvel(i)) v = -stepgen_maxvel(i);
                    if(v > stepgen_maxvel(i)) v = stepgen_maxvel(i);
            }
            rate = v*stepgen_scale(i)*ONE*PLUTO_SPEED;///(1<<speedrange); //v*400*3.2ms

            if(rate > MAX_STEP_RATE) rate = MAX_STEP_RATE;
            if(rate < -MAX_STEP_RATE) rate = -MAX_STEP_RATE;

            if(!stepgen_enable(i)) rate = 0;
            if(i == 0){
                debug_0 = rate;
*//*                  static int orate=0;
                if(rate!=orate && rate!=0){
                printf("old=%d rate=%d maxrate=%d actual=%lf maxvel=%lf v=%lf->%lf*%lf fmax=%lf oldvel=%lf err=%lf f=%lf scale=%lf\n",
                    orate, rate, MAX_STEP_RATE,actual_max, stepgen_maxvel(i), v0, v,
                    (stepgen_scale(i)*ONE*PLUTO_SPEED/(1<<speedrange)), fmax,
                    data.old_velocity_cmd[i],est_err, fperiod, scale_abs);
                }
                orate=rate;
*//*              }

            //if(!i%2)
            //      txBuf[i%2] = 0;
            //txBuf[i%2] |= rate<<(16*(i%2));
*/            tbuf[i] = rate;
    }
//word 2 8-11 bytes
        r = 0;
        for(i=0; i<14; i++) {
                if(!dout(i) ^ !dout_invert(i)) r |= (1<<i);
        }
        if(wdt_enable) r |= (1<<14);//wdt enable
        txBuf[2] = r;// dout -> 10,11byte
        r=0;
        r = steplen_ticks & LEN_MASK;//(dirtime_ticks > LEN_MASK)?LEN_MASK: dirtime_ticks & LEN_MASK;
        if (stepgen_step_polarity)r |= (1<<7);
        r = steplen_ticks & LEN_MASK;//((steplen_ticks > LEN_MASK)?LEN_MASK:(steplen_ticks & LEN_MASK)) << 8;
        //r = steplen_ticks+stepspace_ticks | (dirtime_ticks << 8);
        r |= ( tap & 0x3 << 14);

        txBuf[2] |= r<<16;
//word 3 12-15 bytes
        txBuf[3]=((__u32)pwm_out & 0xFF);//12 byte
        r=0;
        for(i=0; i<4; i++){
                 if(dir_polarity (i))
                        r|= (1<<i);
        }
        txBuf[3]|= (r<<8); //13 byte
// empty
        for (i=4; i<BUFSIZE; i++) { //fake
                txBuf[i] = i;
        }

        if(spi_transfer32(fd, txBuf, rxBuf)<0)
            return;

        for(i=0; i<4; i++) {
            stepgen_fb(rxBuf[i], i, period);
        }

        spidata = rxBuf[4];
        //raw_rx_din = debug_0 = spidata; //din
        //debug_1 = spidata;

        for(i=0; i< 16; i++) {
                int b = spidata & (1<<i);
                din(i) = !!b;
                din_not(i) = !b;
        }
        spidata>>=16;
        spindle_data=spidata;
        spindle_rpm=(float)((spidata>65500||spidata<50)?0:(RPM_FREQ*60)/(spidata+1));

        for (i=5; i<BUFSIZE; i++) { //clear buf?
                spidata = rxBuf[i];
        }
}

int check_platform(void)
{
        FILE *fp;
        char buf[2048];
        size_t fsize;

        fp = fopen("/proc/cpuinfo", "r");
        fsize = fread(buf, 1, sizeof(buf), fp);
        fclose(fp);

        if (fsize == 0 || fsize == sizeof(buf))
                return 0;

        // NUL terminate the buffer
        buf[fsize] = '\0';

        if (NULL != strstr(buf, "BCM2708") ||
						NULL != strstr(buf, "BCM2709")){
					return 2;
				}
		if (NULL != strstr(buf, "BCM2835")){
          return 3;
		}
        return 0;
}
