component rpi_spi_cpld1 """Hardware driver and firmware for the RPi-CNC-HAT, for use with stepper machines and RaspberryPi SPI .""";

description """
rpi_spi_cpld is a LinuxCNC software driver and associated firmware that allow the RPi-CNC-HAT board to be used to control a stepper-based CNC machine.

The driver has 4 step+direction channels, 14 dedicated digital outputs, and 16
dedicated digital inputs.

.SS CPLD clk from rpi
Use loadusr -w minimal_clk 40M -q

.SS Step generators
The step generator takes a position input and output.

The step waveform includes step length/space and direction hold/setup time.
Step length and direction setup/hold time is enforced in the FPGA.  Step space
is enforced by a velocity cap in the driver.

\\fI(all the following numbers are subject to change)\\fR
In \\fIspeedrange=0\\fR, the maximum step rate is 312.5kHz.  For position
feedback to be accurate, the maximum step rate is 512 pulses per servo cycle
(so a 1kHz servo cycle does not impose any additional limitation).  The maximum
step rate may be lowered by the step length and space parameters, which are
rounded up to the nearest multiple of 1600ns.

In successive speedranges the maximum step rate is divided in half, as is the
maximum steps per servo cycle, and the minimum nonzero step rate.

.SS Digital I/O
The digital output pins conform to the `canonical digital output' interface
described in the HAL manual.

The digital input pins conform to the `canonical digital input' interface
described in the HAL manual.
""";

pin in float stepgen.#.position-cmd[4];
pin out float stepgen.#.velocity-fb[4];
pin out float stepgen.#.position-fb[4];
pin out s32 stepgen.#.counts[4];
pin in bit stepgen.#.enable[4];
pin in bit stepgen.#.reset[4] """When TRUE, reset position-fb to 0""";
param rw float stepgen.#.scale[4] = 1.0;
param rw float stepgen.#.maxvel[4] = 0;
param rw float stepgen.#.maxaccel[4] = 1.0;
param rw bit stepgen.step.polarity;
param rw bit dir.#.polarity[4]=0 """true -> invert""";

param rw bit wdt.enable=0;
param rw u32 tap=0;

param rw u32 stepgen.steplen =20000
"""Step length in ns (max=49600ns[1600*31]).""";
param rw u32 stepgen.stepspace 
"""Step space in ns""";
param rw u32 stepgen.dirtime =20000
"""Dir hold/setup in ns (max=49600ns[1600*31])""";

param rw u32 spi.speed = 4000000
"""spi speed HZ""";


pin in bit dout.##[14]
"""dout.\\fIMM\\fR corresponds to the pin labeled
OUT\\fIM\\fR on the pinout diagram.""";
param rw bit dout.##-invert[14]
"""If TRUE, the output on the corresponding \\fBdout.\\fIMM\\fR is inverted.""";

pin out bit din.##[16];
pin out bit din.##_not[16]
"""din.\\fIMM\\fR corresponds to the pin labeled
IN\\fIM\\fR on the pinout diagram.""";

pin out float spindle.rpm """Spindle rpm""";
pin in  s32 pwm.out """Set pwm 0-255""";
param rw u32 rpm.freq=0 """freq for calc RPM""";

param rw s32 debug_0;
param rw s32 debug_1;
param rw float debug2=0.01;//?? great value changes DIR
//param rw float debug_3=2.0
// """Registers that hold debugging information of interest to developers""";

option singleton;
option extra_setup;
option extra_cleanup;
option data internal;

see_also """The \\fIpluto_step\\fR section in the HAL User Manual, which shows the location of each physical pin on the pluto board.""";

function transfer  """transfers data between master and slave devices""";
function spitest """test spi transfer (only for developers)""";

license "GPL";
author "Matsche & fedor2018";
;;

#include "rtapi.h"
#include "rtapi_bitops.h"
#include "rtapi_app.h"
#include "hal.h"

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <unistd.h>
#include <errno.h>
#include <stdarg.h>
#include <linux/types.h>
#include <linux/spi/spidev.h>

typedef enum {
    UNSUPPORTED,
    RPI,
    RPI_2
} platform_t;
static platform_t platform;
platform_t check_platform(void);

#define SPI_BUFFER_SIZE 20
#define BUFSIZE	(SPI_BUFFER_SIZE/4)

//volatile unsigned *spi;
static int fd;
static uint8_t spi_mode=0;
static uint8_t spi_bits=8;
static __u32 spi_spd=1000000;
static __u16 spi_delay=0;

static volatile __u32 txBuf[BUFSIZE], rxBuf[BUFSIZE];

static int speedrange=0;
RTAPI_MP_INT(speedrange, "Speed range 0..3");

#define W 10
#define F 11
#define T 5

#define PLUTO_CLK   40000000      //40MHz
#define PLUTO_SPEED_NS (1600)      //1.6us=625kHz=>0.8us
#define PLUTO_SPEED    (PLUTO_SPEED_NS * 1e-9)   // 0,0000016
#define PLUTO_FREQ     (1e9 / PLUTO_SPEED_NS)    // 625kHz
#define TMAX           ((1<<T)-1)  // 0x1f=b11111
#define ONE (1<<F)    // 0x800 /2048
#define MAX_STEP_RATE ((1<<F)-1) //  0x7ff
#define RPM_FREQ PLUTO_CLK/2048 //  19531,25

#define MODULO ((1<<(W+F))-1)  // 1FFFFF/2097151
#define MASK ((1<<(W+F))-1)    //
#define MAXDELTA (MASK/2)      // FFFFF/1048575
#define LEN_MASK 0x1F

typedef struct {
	int64_t last_count[4];
	int64_t reset_count[4];
	double old_position_cmd[4];
	double old_velocity_cmd[4];
} internal;


EXTRA_SETUP() {
    spi_spd=spi_speed;
    if(check_platform()==UNSUPPORTED){
			rtapi_print_msg(RTAPI_MSG_ERR,
	        "HAL_rpi_spi_cpld: ERROR: platform unsupported\n");
			return -1;
    }
    fd=open("/dev/spidev1.2", O_RDWR);
    if(fd<0){
		rtapi_print_msg(RTAPI_MSG_ERR,
		        "HAL_rpi_spi_cpld: ERROR: cannot open spi\n");
		return -1;
  }
  if(ioctl(fd, SPI_IOC_WR_MODE, &spi_mode)<0||
    ioctl(fd, SPI_IOC_RD_MODE, &spi_mode)<0){
	rtapi_print_msg(RTAPI_MSG_ERR,
	        "HAL_rpi_spi_cpld: ERROR: SPI_IOC_xx_MODE\n");
	return -1;
    }
  if(ioctl(fd, SPI_IOC_WR_BITS_PER_WORD, &spi_bits)<0||
    ioctl(fd, SPI_IOC_RD_BITS_PER_WORD, &spi_bits)<0){
	rtapi_print_msg(RTAPI_MSG_ERR,
	        "HAL_rpi_spi_cpld: ERROR: SPI_IOC_xx_BITS_PER_WORD\n");
	return -1;
    }
  if(ioctl(fd, SPI_IOC_WR_MAX_SPEED_HZ, &spi_spd)<0||
    ioctl(fd, SPI_IOC_RD_MAX_SPEED_HZ, &spi_spd)<0){
	rtapi_print_msg(RTAPI_MSG_ERR,
	        "HAL_rpi_spi_cpld: ERROR: SPI_IOC_xx_MAX_SPEED_HZ=%d req=%d\n",
					SPI_IOC_WR_MAX_SPEED_HZ, spi_spd);
	return -1;
    }
    rtapi_print_msg(RTAPI_MSG_WARN,
	    "HAL_rpi_spi_cpld: setup ok\n");
	return 0;
}

EXTRA_CLEANUP() {
  close(fd);
    rtapi_print_msg(RTAPI_MSG_WARN,
	    "HAL_rpi_spi_cpld: cleanup\n");
}

int spi_transfer32(int fd, volatile __u32 *tx, volatile __u32 *rx){
	struct spi_ioc_transfer tr = {
		.tx_buf = (unsigned long)tx,
		.rx_buf = (unsigned long)rx,
		.len = SPI_BUFFER_SIZE,
		.delay_usecs = spi_delay,
		.speed_hz = spi_spd,
		.bits_per_word = spi_bits,
	};
/*
	rtapi_print_msg(RTAPI_MSG_ERR,
	    "HAL_rpi_spi_cpld: tx=: ");
	for (int i=0; i<BUFSIZE; i++) {
	    rtapi_print_msg(RTAPI_MSG_ERR," %08X",tx[i]);
	}
//	rtapi_print_msg(RTAPI_MSG_ERR,"\n");
*/
	if(ioctl(fd, SPI_IOC_MESSAGE(1), &tr)<0){
	    rtapi_print_msg(RTAPI_MSG_ERR,
	        "HAL_rpi_spi_cpld: ERROR: transer32\n");
	    return -1;
	}
/*
	rtapi_print_msg(RTAPI_MSG_ERR,
	    "HAL_rpi_spi_cpld: rx=: ");
	for (int i=0; i<BUFSIZE; i++) {
	    rtapi_print_msg(RTAPI_MSG_ERR," %08X",rx[i]);
	}
//	rtapi_print_msg(RTAPI_MSG_ERR,"\n");
*/
	return 0;
}

FUNCTION(spitest) {
	char *buf;
	int i;
	__u32 spidata;
	
	for (i=0; i<BUFSIZE; i++) {
		txBuf[i] = i;
	}
	
	rtapi_print_msg(RTAPI_MSG_ERR,
	    "HAL_rpi_spi_cpld: test transfer32=%d: ",
	    spi_transfer32(fd, txBuf, rxBuf));
	for (i=0; i<BUFSIZE; i++) {
		spidata = rxBuf[i];
	    rtapi_print_msg(RTAPI_MSG_ERR," %08X",spidata);
	}
	rtapi_print_msg(RTAPI_MSG_ERR,"\n");
}

static inline int64_t extend(int64_t old, int newlow, int nbits) {
    int64_t mask = (1<<nbits) - 1;
    int64_t maxdelta = mask / 2;
    int64_t oldhigh = old & ~mask;
    int64_t oldlow = old & mask;
    int64_t candidate1, candidate2;

    candidate1 = oldhigh | newlow;
    if(oldlow < newlow) candidate2 = candidate1 - (1<<nbits);
    else                candidate2 = candidate1 + (1<<nbits);

    if (llabs(old-candidate1) > maxdelta)
	return candidate2;
    else
	return candidate1;
}
	
int stepgen1(int i, double fmax, long period){
	int rate, maxrate = MAX_STEP_RATE;
		double new_position_cmd = stepgen_position_cmd(i);
		double v = new_position_cmd - data.old_position_cmd[i];
		double est_err = stepgen_position_fb(i) + data.old_velocity_cmd[i] * fperiod - new_position_cmd;
		double actual_max;
		double scale_abs = abs(stepgen_scale(i));
double v0=v;
		v = v - debug2 * est_err / fperiod;
		if(v > 0) v = v + .5/scale_abs;
		else if(v < 0) v = v - .5/scale_abs;
		data.old_position_cmd[i] = new_position_cmd;
		data.old_velocity_cmd[i] = v;
		actual_max = fmax / scale_abs;
		if(stepgen_maxvel(i) < 0) stepgen_maxvel(i) = -stepgen_maxvel(i);
		if(stepgen_maxvel(i) != 0 && stepgen_maxvel(i) > actual_max) {
			static int message_printed[4] = {0,0,0,0};
			if(!message_printed[i]) {
				rtapi_print_msg(RTAPI_MSG_ERR,
						"Requested step rate %dHz decreased to %dHz "
						"due to hardware or timing limitations\n",
						(int)(stepgen_maxvel(i) * scale_abs),
						(int)(fmax));
				message_printed[i] = 1;
			}
			stepgen_maxvel(i) = actual_max;
		}

		if(stepgen_maxvel(i) == 0) {
			if(v < -actual_max) v = -actual_max;
			if(v > actual_max) v = actual_max;
		}else {
			if(v < -stepgen_maxvel(i)) v = -stepgen_maxvel(i);
			if(v > stepgen_maxvel(i)) v = stepgen_maxvel(i);
		}
		rate = v*stepgen_scale(i)*ONE*PLUTO_SPEED/(1<<speedrange); //v*400*3.2ms

		if(rate > maxrate) rate = maxrate;
		if(rate < -maxrate) rate = -maxrate;

		if(!stepgen_enable(i)) rate = 0;
		if(i == 0){
		    debug_0 = rate;
		    static int orate=0;
		    if(rate!=orate && rate!=0){
			printf(".d2=%.3lf v=%lf=>%lf(%lf) est_err=%lf ",
			debug2, v0,v,stepgen_maxvel(i), est_err);
		    printf("rate=%d=>%d= %lf*%lf maxrate=%d actual=%lf fmax=%.2lf f=%lf scale=%.2lf\n",
			orate, rate, v,(stepgen_scale(i)*ONE*PLUTO_SPEED/(1<<speedrange)),
			maxrate,actual_max,  fmax,
			 fperiod, scale_abs);
		    }
		    orate=rate;
		}
		
		//if(!i%2)
		//	txBuf[i%2] = 0;
		//txBuf[i%2] |= rate<<(16*(i%2));
    return rate;
}

void stepgen_fb(int i, int spidata, long period){
		int64_t count;
		double fcount;
		int newlow;
		int reset;
		
		//spidata = rxBuf[i];
		
		reset = stepgen_reset(i);
		newlow = spidata & MASK;
		count = extend(data.last_count[i], newlow, W+F);
		stepgen_velocity_fb(i) = (count-data.last_count[i])/stepgen_scale(i)/fperiod/(1<<F);
		data.last_count[i] = count;
		if(reset) data.reset_count[i] = count;
		fcount = (count-data.reset_count[i])*1.0/(1<<F);
		stepgen_counts(i) = fcount;
		stepgen_position_fb(i) = fcount/stepgen_scale(i);


		if(i == 0) {
		//		debug_0 = spidata;
			debug_1 = newlow;
		}
}

int stepgen2(int i, double max_vel, long period){// PiCnc v2
    double max_accl=max_vel/fperiod; //set internal accel limit to its absolute max
    double match_accl=1.0, new_vel=0.0;
    int rate;

    if(stepgen_maxaccel(i) <= 0.0){
        stepgen_maxaccel(i)=0.0;
    }else{
        if((stepgen_maxaccel(i)*fabs(stepgen_scale(i))) > max_accl){
            stepgen_maxaccel(i)=max_accl/fabs(stepgen_scale(i));
        }else{
            max_accl=stepgen_maxaccel(i)*fabs(stepgen_scale(i));
        }
    }
    double pos_cmd = stepgen_position_cmd(i)*stepgen_scale(i);// calculate position command in counts
    double vel_cmd = (pos_cmd-data.old_position_cmd[i])/fperiod;//calculate velocity command in counts/sec
    data.old_position_cmd[i] = pos_cmd;
if(i==0)printf("_max_vel=%.2lf max_accl=%.2lf pos_cmd=%lf(%lf) vel_cmd=%lf(%lf) \n",
        max_vel, max_accl, pos_cmd, data.old_position_cmd[i], vel_cmd, data.old_velocity_cmd[i]);

    if(vel_cmd > max_vel){//apply frequency limit
        vel_cmd = max_vel;
    }else if(vel_cmd < -max_vel){
        vel_cmd = -max_vel;
    }
    if(vel_cmd > data.old_velocity_cmd[i]){//determine which way we need to ramp to match velocity
        match_accl = max_accl;
    }else if(vel_cmd < -data.old_velocity_cmd[i]){
        match_accl = -max_accl;
    }
    double match_time = (vel_cmd-data.old_velocity_cmd[i])/match_accl;//determine how long the match would take
    double avg_v = (vel_cmd + data.old_velocity_cmd[i]) * 0.5;//calc output position at the end of the match
    double curr_pos = stepgen_position_fb(i)*stepgen_scale(i);//
    double est_out = curr_pos + avg_v * match_time;
    double est_cmd = pos_cmd + vel_cmd * (match_time - 1.5*fperiod);//calculate the expected command position at that time
    double est_err = est_out - est_cmd;

if(i==0)printf(" vel_cmd=%.3lf match_accl=%.2lf avg_v=%.2lf curr_pos=%lf \n"
        " match_time=%lf est_out=%lf est_cmd=%lf est_err=%lf \n",
        vel_cmd, match_accl, avg_v, curr_pos, match_time, est_out, est_cmd, est_err);

    if ( match_time < fperiod){//we can match velocity in one period
        if(fabs(est_err) < 0.0001){
            new_vel = vel_cmd;
        }else{
             new_vel = vel_cmd - 0.5 *est_err/fperiod;
             if(new_vel > (data.old_velocity_cmd[i] + max_accl * fperiod)){
                new_vel = (data.old_velocity_cmd[i] + max_accl * fperiod);
             }else if(new_vel < (data.old_velocity_cmd[i] - max_accl * fperiod)){
                new_vel = (data.old_velocity_cmd[i] - max_accl * fperiod);
             }
        }
    }else{
        double dv = -2.0*match_accl*fperiod;
        double dp = dv*match_time;
        if(fabs(est_err+fperiod*2.0)< fabs(est_err)){
            match_accl = -match_accl;
        }
        new_vel = data.old_velocity_cmd[i] + match_accl*fperiod;
    }
    if(new_vel > max_vel){  //apply frequency limit
        new_vel = max_vel;
    }else if(new_vel < max_vel){
        new_vel = -max_vel;
    }
    data.old_velocity_cmd[i]=new_vel;
    rate= new_vel *stepgen_scale(i)*ONE*PLUTO_SPEED;
if(i==0)printf(" new_vel=%lf rate=%lf * %lf fperiod=%lf  \n",
        new_vel, rate,(stepgen_scale(i)*ONE*PLUTO_SPEED/(1<<speedrange)), fperiod);

    if(i==0){
        static int orate=0;
        if(rate!=orate && rate!=0){
            printf("max_vel=%lf max_accl=%lf pos_cmd=%lf vel_cmd=%lf ",
                max_vel, max_accl, pos_cmd, vel_cmd);
            printf("rate=%d=>%d= %lf*%lf fmax=%.2lf\n",
                orate, rate, new_vel,(stepgen_scale(i)*ONE*PLUTO_SPEED/(1<<speedrange)),
                fmax, fperiod);
        }
        orate=rate;
    }
    return rate;
}

int stepgen3(int i, double fmax, long period){
    double ff_vel=(stepgen_position_cmd(i)-data.old_position_cmd[i])/fperiod;
    data.old_position_cmd[i]=stepgen_position_cmd(i);
    double vel_err=stepgen_position_fb(i)-ff_vel;
    double match_accl;
    if(vel_err > 0.0){
        if(stepgen_maxaccel(i)==0){
            match_accl=-vel_err/fperiod;
        }else{
            match_accl=-stepgen_maxaccel(i);
        }
    }else if(vel_err < 0.0){
        if(stepgen_maxaccel(i)==0){
            match_accl=vel_err/fperiod;
        }else{
            match_accl=stepgen_maxaccel(i);
        }
    }else{
        match_accl=0;
    }
    double vel_match;
    if(match_accl == 0){
        vel_match=0.0;
    }else{
        vel_match=-vel_err/match_accl;
    }
if(i==0 && ff_vel!=0)printf("_ff_vel=%lf match_accl=%lf vel_err=%lf old_pos=(%lf) vel_match=%lf old_vel=(%lf) \n",
        ff_vel, match_accl, vel_err, data.old_position_cmd[i], vel_match, data.old_velocity_cmd[i]);

    double avg_v=(ff_vel+stepgen_position_fb(i))*0.5;
    double pos_match=stepgen_position_fb(i)+(avg_v*(vel_match*fperiod));
    double cmd_match=stepgen_position_cmd(i)+(ff_vel*vel_match);
    double err_match=pos_match-cmd_match;
    double vel_cmd;
if(i==0 && ff_vel!=0)printf(" avg_v=%lf pos_match=%lf cmd_match=%lf err_match=%lf \n",
        avg_v, pos_match, cmd_match, err_match);
    if(vel_match < fperiod){
        vel_cmd=ff_vel-(0.5*err_match/fperiod);
        if(stepgen_maxaccel(i) > 0){
            if(vel_cmd > (stepgen_position_fb(i)+(stepgen_maxaccel(i)*fperiod))){
                vel_cmd=stepgen_position_fb(i)+(stepgen_maxaccel(i)*fperiod);
            }else if(vel_cmd < (stepgen_position_fb(i)-(stepgen_maxaccel(i)*fperiod))){
                vel_cmd=stepgen_position_fb(i)-(stepgen_maxaccel(i)*fperiod);
            }
        }
    }else{
        double dv= -2.0 *match_accl*fperiod;
        double dp=dv*vel_match;
        if(fabs(err_match +(dp*2.0))<fabs(err_match)){
            match_accl=-match_accl;
        }
        vel_cmd=stepgen_position_fb(i)+(match_accl*fperiod);
    }
if(i==0 && ff_vel!=0)printf(" vel_cmd=%lf \n",
        vel_cmd);
    double new_vel=vel_cmd*1;
    
    data.old_velocity_cmd[i]=new_vel;
    int rate= new_vel *stepgen_scale(i)*ONE*PLUTO_SPEED;
    
if(i==0 && ff_vel!=0)printf("rate=%d new_vel=%lf * %lf fperiod=%lf  \n",
        rate, new_vel, (stepgen_scale(i)*ONE*PLUTO_SPEED/(1<<speedrange)), fperiod);
    
    return rate;
}

FUNCTION(transfer) {
	char *buf;
	__u16 * tbuf;
	
	int i;
	__u32 spidata;
	
	int r = 0;
	int stepspace_ticks = stepgen_stepspace/PLUTO_SPEED_NS;
	int steplen_ticks = stepgen_steplen/PLUTO_SPEED_NS;
	int dirtime_ticks = stepgen_dirtime/PLUTO_SPEED_NS;
	int rate, maxrate = MAX_STEP_RATE;
	double fmax;

	if(steplen_ticks > TMAX) {
		steplen_ticks = TMAX;
		rtapi_print_msg(RTAPI_MSG_ERR,
				"Requested step length %dns decreased to %dns "
				"due to hardware limitations\n",
				stepgen_steplen, TMAX * PLUTO_SPEED_NS);
		stepgen_steplen = TMAX * PLUTO_SPEED_NS;
	}

	if(dirtime_ticks > TMAX) {
		dirtime_ticks = TMAX;
		rtapi_print_msg(RTAPI_MSG_ERR,
				"Requested direction change time %dns decreased to %dns "
				"due to hardware limitations\n",
				stepgen_dirtime, TMAX * PLUTO_SPEED_NS);
		stepgen_dirtime = TMAX * PLUTO_SPEED_NS;
	}

	// Speed limits come from several sources
	// First limit: step waveform timings
	fmax = /*1.0 / PLUTO_SPEED*/ PLUTO_FREQ / (2 + steplen_ticks + stepspace_ticks);
	// Second limit: highest speed command
	if(fmax > PLUTO_FREQ / (2<<speedrange))   // 78-312kHz
			fmax = PLUTO_SPEED * (2<<speedrange);
	// Third limit: max sign-extenable counts per period fperiod=(period*1e-9)
	if(fmax > MAXDELTA / fperiod / (1<<speedrange))
			fmax = MAXDELTA / fperiod / (1<<speedrange); //

	tbuf = (__u16 *)txBuf;
	for(i=0; i<4; i++) {
	    rate=stepgen3(i, fmax, period);
		tbuf[i] = rate;
	}
//word 2 8-11 bytes
	r = 0;
	for(i=0; i<14; i++) {
		if(!dout(i) ^ !dout_invert(i)) r |= (1<<i);
	}
	if(wdt_enable) r |= (1<<14);//wdt enable
	txBuf[2] = r;// dout -> 10,11byte
	r=0;
	r = (dirtime_ticks > LEN_MASK)?LEN_MASK: dirtime_ticks & LEN_MASK;
	if (stepgen_step_polarity)r |= (1<<7);
	r = ((steplen_ticks > LEN_MASK)?LEN_MASK:(steplen_ticks & LEN_MASK)) << 8;
	//r = steplen_ticks+stepspace_ticks | (dirtime_ticks << 8);
	r |= ( tap & 0x3 << 14);

	txBuf[2] |= r<<16;
//word 3 12-15 bytes
	txBuf[3]=((__u32)pwm_out & 0xFF);//12 byte
	r=0;
	for(i=0; i<4; i++){
		 if(dir_polarity (i))
		 	r|= (1<<i);
	}
	txBuf[3]|= (r<<8); //13 byte
// empty
	for (i=4; i<BUFSIZE; i++) { //fake
		txBuf[i] = i;
	}

	if(spi_transfer32(fd, txBuf, rxBuf)<0)
	    return;
	
	for(i=0; i<4; i++) {
	    stepgen_fb(i, rxBuf[i], period);
	}

	spidata = rxBuf[4];
	//raw_rx_din = debug_0 = spidata; //din
	//debug_1 = spidata;

	for(i=0; i< 16; i++) {
		int b = spidata & (1<<i);
		din(i) = !!b;
		din_not(i) = !b;
	}
	spidata>>=16;
        if(rpm_freq==0){
            spindle_rpm=(float)spidata;
        }else{
            spindle_rpm=(float)((spidata>65500||spidata<50)?0:(rpm_freq*60)/(spidata+1));
        }

	for (i=5; i<BUFSIZE; i++) { //clear buf?
		spidata = rxBuf[i];
	}
}

platform_t check_platform(void)
{
	FILE *fp;
	char buf[2048];
	size_t fsize;

	fp = fopen("/proc/cpuinfo", "r");
	fsize = fread(buf, 1, sizeof(buf), fp);
	fclose(fp);
	
	if (fsize == 0 || fsize == sizeof(buf))
		return 0;

	// NUL terminate the buffer
	buf[fsize] = '\0';

	if (NULL != strstr(buf, "BCM2708"))
		return RPI;
	else if (NULL != strstr(buf, "BCM2709"))
		return RPI_2;
	else
		return UNSUPPORTED;
}
